FORMAT 1A
HOST: https://localhost/api

# Moi.Den.Gi

Moi.Den.Gi is a self-hosted personal accounting web service.

# Group errors

I case of any problem, server should response with applicable error code (like 404 for non existing entity or 422 if submitted entity could not be processed).

Server also *could* send a "error object" with error code responce:
+ Response {4|5}xx (application/vnd.mdg+json)
  {
    "errors": [
        "status": "404",
        "code": "CURRENCY_NOT_FOUND",
        "title": "Requested currency with id 1 could not be found",
        "detail": "We can not find currency with specified code in the database, check it's id please."
    ]
  }

A Error object has the following attributes:

- status (string, required) -  the HTTP status code applicable to this problem, expressed as a string value
- code (string, required) - internal, mdg specific, error code
- title (string, required) - human readable summary of the error
- detail (string, optional) - detailed description of the problem

# Group Settings

Resources describing system configuration variables.

## Settings collection [/setting]

A Settings object has the following attributes:

- value (required) - Value of a setting.

Object id is a string, represetings setting name. At the moment following settings are supported:

* currency.primary - ID of a system's primary currency. Value will be of numeric type.
* ui.transaction.closedialog - Whether transaction creation dialog should be closed after save or not.

### List All Settings [GET]

+ Respone 200 (application/vnd.mdg+json)
  {
    "data": [
        {
            "type": "setting",
            "id": "currency.primary",
            "attributes": {
                "value": "840"
            }
        }
    ]
  }

## Setting [/setting/{setting_id}]

+ parameters
    + setting_id: (required, string) - Name of the configuration variable

### View a setting [GET]

+ Respone 200 (application/vnd.mdg+json)
  {
    "data": {
            "type": "setting",
            "id": "currency.primary",
            "attributes": {
                "value": "840"
            }
        }
  }

### Modify setting value [PUT]

Settings may have different valid valid values for different names. Invalid named will not be accepted

+ Request (application/vnd.mdg+json)
  {
    "data": {
            "type": "setting",
            "id": "currency.primary"
            "attributes": {
                "value": "978"
            }
        }
  }

+ Response 202 (application/vnd.mdg+json)
  + Body
    {
        "data": {
            "type": "setting",
            "id": "currency.primary"
            "attributes": {
                "value": "978"
            }
        }
    }

# Group Currencies

Resources describing currencies

## Currency collection [/currency]

A Currency object has the following attributes.

- code (string, required) - Currency ISO 4217 alfa-3 code
- name (string, required) - Human friendly currency name

Object id should be currency ISO 4217 number-3 code

### List All Currencies [GET]

+ Respone 200 (application/vnd.mdg+json)
  {
    "data": [
        {
            "type": "currency",
            "id": 840,
            "attributes": {
                "code": "USD",
                "name": "$"
            }
        },
        {
            "type": "currency",
            "id": 978,
            "attributes": {
                "code": "EUR",
                "name": "â‚¬"
            }
        }
    ]
  }

## Currency [/currency/{currency_id}]

+ parameters
    + currency_id: (required, number) - ID of a currency in form of ISO 4217 number-3 code

### View a currency detail [GET]

+ Respone 200 (application/vnd.mdg+json)
  {
    "data": {
            "type": "currency",
            "id": 840,
            "attributes": {
                "code": "USD",
                "name": "$"
            }
        }
  }

# Group Rates

Resources describing currency exchange rates

## Currency collection [/rate/{timestamp}]

+ parameters
    + timestamp: (required, timestamp) - Point in time in format YYYY-MM-DDTHH:MM:SS for which exchange rates should be valid

A Rate object has the following attributes.

- from (string, required) - Currency ISO 4217 number-3 code
- to (string, required) - Currency ISO 4217 number-3 code
- rate (decimal, required) - Exchange rate, telling you how much 'from' currency should be spent, to by a single 'to' currency unit
- beginning (timestamp, required) - Timestamp of the rate validity period beginning
- end (timestamp, required) - Timestamp of the rate validity period end

### List All Rates [GET]

+ Respone 200 (application/vnd.mdg+json)
  {
    "data": [
        {
            "type": "rate",
            "id": 1,
            "attributes": {
                "from": 978,
                "to": 840,
                "rate": 1.19,
                "beginning": "2017-09-18T17:00:00",
                "end": "2017-09-18T18:00:00"
            }
        },
        {
            "type": "rate",
            "id": 1,
            "attributes": {
                "from": 356,
                "to": 348,
                "rate": 4.0396,
                "beginning": "2017-09-18T17:00:00",
                "end": "2017-09-18T18:00:00"
            }
        },
    ]
  }

## Rate [/rate/{timestamp}/{from}/{to}]

+ parameters
    + timestamp: (required, timestamp) - Point in time in format YYYY-MM-DDTHH:MM:SS for which exchange rates should be valid
    + from: ID of a "sell" currency in form of ISO 4217 number-3 code
    + from: ID of a "buy" currency in form of ISO 4217 number-3 code

### View a rate detail [GET]

+ Respone 200 (application/vnd.mdg+json)
  {
    "data": {
            "type": "rate",
            "id": 1,
            "attributes": {
                "from": 978,
                "to": 840,
                "rate": 1.19,
                "beginning": "2017-09-18T17:00:00",
                "end": "2017-09-18T18:00:00"
            }
        }
        }
  }

# Group Accounts

Resources related to account management

## Account collection [/account]

An Account object has the following attributes

- account_type: (enum[string], required) - type of the account
  + Members
    + `asset`
    + `expense`
    + `income`
- currency_id: (integer, required) - account's currency id
- name: (string, required) - Account name
- balance: (decimal, readonly) - Account balance. Initial value could be set during account creation
- primary_balance: (decimal, readonly) - Account balance in primary currency. Automatically converted from the 'balance' field by applying correspondent rate.
- hidden: (boolean, optional) - Marks deleted accounts
- favorite: (boolean, optional) - Marks account as favorite. Applicable only to the 'asset' accounts
- operational: (boolean, optional) - Marks account as operational. Applicable only to the 'asset' accounts

### List all Accounts [GET?filter={hidden:true}]

Accounts with attribute 'hidden' equal to 'true' are not shown by default.

+ Parameters
  + filter: (optional, json object) - dictionary of fields and their values, to be applied as a filter to accounts list.

+ Response 200 (application/vnd.mdg+json)
  {
    "data": [
        {
            "type": "account",
            "id": 1,
            "attributes": {
                "account_type": "asset",
                "currency_id": 840,
                "name": "Current USD",
                "balance": 100500,
                "primary_balance": 100500,
                "operational": true,
                "favorite": true
            }
        },
        {
            "type": "account",
            "id": 2,
            "attributes": {
                "account_type": "asset",
                "currency_id": 978,
                "name": "Savings EUR",
                "primary_balance": 10100,
                "balance": 9000
            }
        }
        {
            "type": "account",
            "id": 3,
            "attributes": {
                "account_type": "expense",
                "currency_id": 978,
                "name": "Household expenses",
                "balance": 9000,
                "primary_balance": 10100
            }
        }
        {
            "type": "account",
            "id": 4,
            "attributes": {
                "account_type": "expense",
                "currency_id": 978,
                "name": "Rent",
                "balance": 9000,
                "primary_balance": 10100,
                "parent_id": 3
            }
        }
    ]
  }

### Create a new account [POST]

+ Request (application/vnd.mdg+json)
  {
    "data": {
            "type": "account",
            "attributes": {
                "account_type": "expense",
                "currency_id": 978,
                "name": "Rent",
                "parent_id": 3
            }
        }
  }

+ Response 201 (application/vnd.mdg+json)
  + Headers
    Location: /account/4
  + Body
    {
      "data": {
            "type": "account",
            "id": 4
            "attributes": {
                "account_type": "expense",
                "currency_id": 978,
                "name": "Rent",
                "balance": 0,
                "primary_balance": 0,
                "parent_id": 3
            }
        }
    }

## Account [/account/{account_id}]

+ parameters
    + account_id: (required, number) - ID of an account in form of integer

### View an account detail [GET]

+ Respone 200 (application/vnd.mdg+json)
    {
    "data": {
            "type": "account",
            "id": 4,
            "attributes": {
                "account_type": "expense",
                "currency_id": 978,
                "name": "Rent",
                "balance": 9000,
                "primary_balance": 10100,
                "parent_id": 3
            }
        }
  }

### Modify account data [PUT]

Only `hidden`, `name`, `favorite` and `operational` fields could be changed. Values in other fields will be silently ignored.

+ Request (application/vnd.mdg+json)
  {
    "data": {
            "type": "account",
            "id": 4
            "attributes": {
                "account_type": "expense",
                "currency_id": 978,
                "name": "Montlhy rent",
                "balance": 9000,
                "primary_balance": 10100,
                "parent_id": 3
            }
        }
  }

+ Response 202 (application/vnd.mdg+json)
  + Body
    {
      "data": {
            "type": "account",
            "attributes": {
                "account_type": "expense",
                "currency_id": 978,
                "name": "Montlhy rent",
                "balance": 9000,
                "primary_balance": 10100,
                "parent_id": 3
            }
        }
    }

### Delete an account [DELETE]

Actually accounts are immortal, deleting an account puts a 'hidden' flag on it.

+ Response 204

# Group Transactions

Resources related to Transaction management

## Transaction collection [/transaction]

A Transaction object has the following attributes

- timestamp: (date, required) - transaction timestamp
- comment: (string, optional) - transaction description
- tags[]: [string[], optional] - tags, associated with transaction
- operations[] Each operation has the following attributes
  - account_id: (number, required) - Related account id
  - amount: (decimal, required) - account balance change
  - rate: (decimal, optional) - exchange rate to be applied

Transaction object have some limitations:
  - Operations with amount equal to zero are ignored
  - It should include at least on non-zero operation
  - Sum of all operations must be zero (excluding ignored operations)
  - Rate value may not be present only on accounts with same currency and only for one currency. So, if you have operations only on accounts with 'EUR' currency, 'rate' field can be omited. If you have several operations on 'EUR' accounts and 'USD' accounts, 'rate' field can be omited for all 'EUR' accounts or 'USD' accounts, but not for both.
  - Same applies in opposite direction - in a multicurrency transaction operations on some curency rate must not be specified or specified it as 1.
  - Rate may not be zero.
  - Rate values may differ in each operation with exclusion: if some operation have no 'rate' field set or rate set to '1', all other operations on accounts with same currency must have same rate of 1 or no rate. You can mix operations with rate equal to 1 and operations with no rate on same currency.

Multi currency support is implemented by checking, that all operations or all operations, excluding operations for some single currency, have a rate field. During transaction balance validation, amount of the
operation will be multiplied to its rate and only after that it will be summarized. It is recommended to always fill 'rate' field, setting its value to 1 where currency conversion is not required, so currency operations with rate '1' will be used as base currency. It is also recommended to use system's default currency as a conversion base.

### List all Transactions [GET?filter={tags:[tag1,tag2]}&sort=timestamp,comment&page[number]=2&page[size]=10&timestamp[notEarlier]=value&timeStamp[notLater]=value]

+ Parameters
  + filter: (optional, json object) - dictionary of fields and their values, to be applied as a filter to transactions list. For attributes of array type it could also be an array. Filtering could be done only on `comment`, `tags` and `account_id` attributes
  + sort: (optional, string) - list of fields used for transactions list sorting. Sort will be applied in the same order as fields are listed. Prepend field name with dash, to revert sort order. Sorting could be done only by `timestamp` field. Only first item in a list is used as a sortf eidl at the moment.
  + pageNumber: (optional, integer) - Paginate list and return only data, matching specified page number. This parameter is required to activate pagination.
  + pageSize: (optional, integer) - Paginate list using specified page size (max transactions on page).
    + Default: `10`
  + notEarlier: (optional, integer) - Optional, range based filter on timestamp. Will filter out all transactions happened before specified point in time.
  + notLater: (optional, integer) - Optional, range based filter on timestamp. Will filter out all transactions happened after specified point in time.

+ Response 200 (application/vnd.mdg+json)
  {
    "data": [
        {
            "type": "transaction",
            "id": 1,
            "attributes": {
                "timestamp": "123456",
                "comment": "A sample transaction",
                "tags": ["USD", "New year party"],
                "operations": [
                    {
                        "account_id": 1,
                        "amount": -100.50
                    },
                    {
                        "account_id": 2,
                        "amount": 100
                    },
                    {
                        "account_id": 3,
                        "amount": 0.50
                    }
                ]
            }
        }
    ]
  }

### Create a new transaction [POST]

+ Request (application/vnd.mdg+json)
  {
    "data": {
        "type": "transaction",
        "attributes": {
            "timestamp": "123456",
            "comment": "A sample transaction",
            "tags": ["USD", "New year party"],
            "operations": [
                {
                    "account_id": 1,
                    "amount": -100.50
                },
                {
                    "account_id": 2,
                    "amount": 100
                },
                {
                    "account_id": 3,
                    "amount": 0.50
                }
            ]
        }
    }
  }

+ Response 202 (application/vnd.mdg+json)
  + Headers
    Location: /transaction/4
  + Body
    {
    "data": [
        {
            "type": "transaction",
            "id": 4,
            "attributes": {
                "timestamp": "123456",
                "comment": "A sample transaction",
                "tags": ["USD", "New year party"],
                "operations": [
                    {
                        "account_id": 1,
                        "amount": -100.50
                    },
                    {
                        "account_id": 2,
                        "amount": 100
                    },
                    {
                        "account_id": 3,
                        "amount": 0.50
                    }
                ]
            }
        }
    ]
  }

## Transaction [/account/{transaction_id}]

+ parameters
    + transaction_id: (required, number) - ID of a transaction in form of integer

### View an transaction detail [GET]

+ Respone 200 (application/vnd.mdg+json)
    {
    "data": [
        {
            "type": "transaction",
            "id": 4,
            "attributes": {
                "timestamp": "123456",
                "comment": "A sample transaction",
                "tags": ["USD", "New year party"],
                "operations": [
                    {
                        "account_id": 1,
                        "amount": -100.50
                    },
                    {
                        "account_id": 2,
                        "amount": 100
                    },
                    {
                        "account_id": 3,
                        "amount": 0.50
                    }
                ]
            }
        }
    ]
  }

### Modify transaction data [PUT]

+ Request (application/vnd.mdg+json)
  {
    "data": [
        {
            "type": "transaction",
            "id": 4,
            "attributes": {
                "timestamp": "123456",
                "comment": "A sample transaction",
                "tags": ["USD", "New year party"],
                "operations": [
                    {
                        "account_id": 1,
                        "amount": -100.50
                    },
                    {
                        "account_id": 2,
                        "amount": 90
                    },
                    {
                        "account_id": 3,
                        "amount": 10.50
                    }
                ]
            }
        }
    ]
  }

+ Response 200 (application/vnd.mdg+json)
  + Body
    {
    "data": [
        {
            "type": "transaction",
            "id": 4,
            "attributes": {
                "timestamp": "123456",
                "comment": "A sample transaction",
                "tags": ["USD", "New year party"],
                "operations": [
                    {
                        "account_id": 1,
                        "amount": -100.50
                    },
                    {
                        "account_id": 2,
                        "amount": 90
                    },
                    {
                        "account_id": 3,
                        "amount": 10.50
                    }
                ]
            }
        }
    ]
  }

### Delete an transaction [DELETE]

+ Response 204

# Group Budget

Resources related to budget management

## Budget collection [/budget]

A budget object has the following attributes

- term_beginning: (required, timestamp) - Budget is not effective before specified point in time
- term_end: (required, timestamp) - Budget is not effective after specified point in time. Minimum Budget effectivity period is a day (24 hours).
- incoming_amount: (required, decimal, readonly) - Sum of all amounts on accounts with account_type 'asset'. Value is not fixed and subject to change until term_beginning comes. It will be automatically filled. Exposed in primary currency.
- outgoing_amount: (required, json object, readonly)
  - expected: (required, decimal, readonly) - Estimated sum of all amounts on accounts with account_type 'asset' *after* budget completion. Value is calculated automatically when related BudgetEntries are added/removed/modified. Exposed in primary currency.
  - actual - Sum of all amounts on accounts with account_type 'asset' *after* budget completion. Calculated during budget execution. Exposed in primary currency.
- state: (required, json object, readonly)
  - income (required, json object, readonly)
    - actual(required, decimal, readonly) - Actual income, received during budget validity period. Calculated as a sum of income account operations, happened during transaction validity period. Exposed in primary currency.
    - expected(required, decimal, readonly) - Income expected to be received during budget validity period. Calculated as a sum of expected values on budget entries related to income accounts. Exposed in primary currency.
  - expense (required, json object, readonly)
    - actual(required, decimal, readonly) - Actual expenses, happened during budget validity period. Calculated as a sum of expense account operations, happened during transaction validity period. Exposed in primary currency.
    - expected(required, decimal, readonly) - Expected expenses during budget validity period. Calculated as a sum of expected values on budget entries related to expense accounts. Exposed in primary currency.
  - change (required, json object, readonly)
    - actual(required, decimal, readonly) - Actual change on expense accounts amounts, happened today. Calculated as a sum of expense account operations, happened today. For non-current account will be zero. Exposed in primary currency.
    - expected(required, decimal, readonly) - Expected change on expense accounts amounts for today. Calculated as a sum of change values on budget entries related to expense accounts. For non-current account will be zero. Exposed in primary currency.

### Create a new budget [POST]

Budgets effective dates are inclusive and should not overlap.

+ Request (application/vnd.mdg+json)
  {
    "data": {
        "type": "budget",
        "attributes": {
            "term_beginning": "2017-02-01",
            "term_end": "2017-02-28"
        }
    }
  }

+ Response 202 (application/vnd.mdg+json)
  + Headers
    Location: /budget/20170201
  + Body
    {
    "data": [
        {
            "type": "budget",
            "id": 20170201,
            "attributes": {
                "term_beginning": "2017-02-01",
                "term_end": "2017-02-28",
                "incoming_amount": 100.50
            }
        }
    ]
  }


### List all Budgets [GET]

+ Response 200 (application/vnd.mdg+json)
  {
    "data": [
        {
            "type": "budget",
            "id": 20170201,
            "attributes": {
                "term_beginning": "2017-02-01",
                "term_end": "2017-02-28",
                "incoming_amount": 9000,
                "outgoing_amount": {
                    "expected": 100500,
                    "actual": 3.62
                }
            }
        }
    ]
  }

## Budget entry [/budget/{YYYY}{MM}/{DD}]

### View Budget detail [GET]

+ Response 200 (application/vnd.mdg+json)
  {
    "data": {
            "type": "budget",
            "id": 1,
            "attributes": {
                "term_beginning": 123456,
                "term_end": 223456,
                "incoming_amount": 9000,
                "outgoing_amount": {
                    "expected": 100500,
                    "actual": 3.62
                }
            }
        }
  }

### Delete a Budget [DELETE]

+ Response 204

## BudgetEntry collection [/budget/{YYYY}{MM}{DD}/entry]

+ parameters
    + budget_id: (required, number) - ID of owning budget in form of integer

A BudgetEntry object has the following attributes

- account_id: (required, integer) - id of account, linked to that BudgetEntry. Every account could be used only once per each Budget.
- even_distribution: (required, boolean) - whether expected change on that account should be evenly distributes over Budget term or it is expected to be occasional based. For example, 'meal budget' is usually evenly distributed, you spent it in small pieces almost every day during Budget period. On the other hand, 'flat rent' is usually occasional, as you pay it only once during Budget period.
  - Default: `True`
- proration: (optional, boolean) - affects of 'change_amount' calculation. Only valid when `even_distribution` is `True`
  - Default: `True`
- expected_amount (required, decimal) - your expected change on account_id amount during Budget effective period.
- actual_amount (required, decimal, readonly) - your *actual* change on account_id amount during Budget effective period. Calculated automatically.
- change_amount (optional, decimal, readonly) - hint on your spendings, helping you to keep in expected_amount. change_amount is calculated automatically as a `expected_amount/number of days in Budget term`. May be recalculated during your actual Budget execution. Only valid is BudgetEntry.even_distribution is set to `True`. If 'BudgetEntry.proration' is set to `True` it will recalculate with each submited budget related transaction as `(expected_amount-actual_amount)/number of days *left* in Budget term`, negative value will be cut to zero. If `BudgetEntry.proration` is set to False it will recalculate with each submited budget related transaction as
`expected_amount-actual_amount-(expected_amount/number of days in Budget term)*number of days *left* in Budget term`, negative value will be cut to zero.
- account_name: (requires, string) - Name of an account, linked to that BudgetEntry.
- account_type: (enum[string], required) - Name of an account, linked to that BudgetEntry.

BudgetEntry lifecycle is managed automatically. It will be created with budget and deleted with budget. During creation of new non-"asset" account, corresponding budget entries should be automatically provided to all existing budgets.

+ Response 200 (application/vnd.mdg+json)
  {
    "data": [
        {
            "type": "budgetentry",
            "id": 1,
            "attributes": {
                "account_id": 1,
                "account_name": "Income",
                "account_type": "income",
                "even_distribution": false,
                "expected_amount": 100500,
                "actual_amount": 100501
            }
        },
        {
            "type": "budgetentry",
            "id": 2,
            "attributes": {
                "account_id": 2,
                "account_name": "Expense",
                "account_type": "expense",
                "even_distribution": True,
                "proration": True,
                "expected_amount": 9000,
                "actual_amount": 4500,
                "change_amount": 300
            }
        },
        {
            "type": "budgetentry",
            "id": 3,
            "attributes": {
                "account_id": 3,
                "account_name": "Rent",
                "account_type": "expense",
                "even_distribution": True,
                "proration": False,
                "expected_amount": 9000,
                "actual_amount": 4000,
                "change_amount": 800
            }
        }
    ]
  }


## BudgetEntry [/budget/{YYYY}{MM}/{DD}/entry/{entry_id}]

+ parameters
    + budget_id: (required, number) - ID of owning budget in form of integer
    + entry_id: (required, number) - ID of a transaction in form of integer

### View an BudgetEntry detail [GET]

+ Response 200 (application/vnd.mdg+json)
  {
    "data": {
            "type": "budgetentry",
            "id": 1,
            "attributes": {
                "account_id": 1,
                "account_name": "Income",
                "account_type": "income",
                "even_distribution": false,
                "expected_amount": 100500,
                "actual_amount": 100501
            }
        }
  }

### Modify BudgetEntry data [PUT]

+ Request (application/vnd.mdg+json)
{
    "data": {
            "type": "budgetentry",
            "id": 1,
            "attributes": {
                "even_distribution": false,
                "expected_amount": 100500,
            }
        }
  }

+ Response 200 (application/vnd.mdg+json)
  + Body
    {
        "data": {
            "type": "budgetentry",
            "id": 1,
            "attributes": {
                "even_distribution": false,
                "expected_amount": 100500,
            }
        }
    }

### Delete a BudgetEntry [DELETE]

+ Response 204
